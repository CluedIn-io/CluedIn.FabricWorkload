# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- test

pool:
  vmImage: ubuntu-latest

variables:
- group: FabricService

resources:
  repositories:
    - repository: templates
      type: github
      name: CluedIn-io/AzurePipelines.Templates
      endpoint: 'CluedIn-io'
      ref: refs/heads/refactor

stages:
  - stage: BUILD_STAGE
    displayName: " Build Fabric Frontend"
    jobs:
    - job:
      displayName: "Build and Push Fabric Frontend"
      steps:
      - template: common/gitversion.yml@templates
      - script: npm i
        displayName: "npm - Install dependencies"

  - stage: DEPLOY_STAGE_DEVELOP
    displayName: "Deploy Fabric Frontend - Dev"
    condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'test'))
    variables:
      - name: environment
        value: "test"
    jobs:
      - template: ./templates/deploy-infrastructure.yml
        parameters:
          environment: $(environment)
          deploymentEnvironment: fabric-dev
          terraformStorage: $(service.Terraform.StorageAccount)
          terraformContainer: $(service.Terraform.Container)
          terraformAccessKey: $(service.Terraform.AccessKey)
          terraformDir: $(System.DefaultWorkingDirectory)/Frontend/terraform
          terraformOutputPath: $(Pipeline.Workspace)/Frontend/terraform/$(environment)
          terraformPlanPath: $(Pipeline.Workspace)/Frontend/terraform/$(environment)/tfplan
          subscriptionId: $(service.Azure.SubscriptionId)
          clientId: $(service.Azure.ClientId)
          clientSecret: $(service.Azure.ClientSecret)
          tenantId: $(service.Azure.TenantId)
          location: $(service.Develop.Location)
          resourceGroupName: $(service.Develop.ResourceGroupName)
  